def left(i):
    return 2*i+1

def right(i):
    return 2*i+2

def parent(i):
    return (i-1)//2

def build_heap_max(T):
    n=len(T)
    for i in range(parent(n-1),-1,-1):
        heapify_max(T, i, n)

def heapify_max(T, i, n):
    l=left(i)
    r=right(i)
    max_val=i
    if l<n and T[l]<T[i]:
        max_val=l
    if r<n and T[r]<T[max_val]:
        max_val=r
    if max_val!=i:
        T[i],T[max_val]=T[max_val],T[i]
        heapify_max(T, max_val, n)

def heapsort_max(T):
    n=len(T)
    build_heap_max(T)
    for i in range(n-1,0,-1):
        T[i],T[0]=T[0],T[i]
        heapify_max(T, 0, i)